
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module greenscreen(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		     [7:0]		VGA_B,
	output		          		VGA_BLANK_N,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO_0, GPIO_0 connect to D5M - 5M Pixel Camera //////////
	input 		    [11:0]		D5M_D,
	input 		          		D5M_FVAL,
	input 		          		D5M_LVAL,
	input 		          		D5M_PIXCLK,
	output		          		D5M_RESET_N,
	output		          		D5M_SCLK,
	inout 		          		D5M_SDATA,
	input 		          		D5M_STROBE,
	output		          		D5M_TRIGGER,
	output		          		D5M_XCLKIN,

	//////////// GPIO_1, GPIO_1 connect to MTL - Multi-Touch LCD Panel //////////
	output		     [7:0]		MTL2MTL_B,
	output		          		MTL2MTL_DCLK,
	output		     [7:0]		MTL2MTL_G,
	output		          		MTL2MTL_HSD,
	output		     [7:0]		MTL2MTL_R,
	output		          		MTL2MTL_TOUCH_I2C_SCL,
	inout 		          		MTL2MTL_TOUCH_I2C_SDA,
	input 		          		MTL2MTL_TOUCH_INT_n,
	output		          		MTL2MTL_VSD
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

	wire clock;
	PLL33 pll(CLOCK_50,!KEY[0],clock);
	

//=======================================================
//  Structural coding
//=======================================================


	display1 display(CLOCK_50,clock,!KEY[0], MTL2MTL_R, MTL2MTL_G, MTL2MTL_B, MTL2MTL_HSD, MTL2MTL_VSD, MTL2MTL_DCLK,
	MTL2MTL_TOUCH_INT_n,MTL2MTL_TOUCH_I2C_SCL,MTL2MTL_TOUCH_I2C_SDA);

endmodule

module vga_controller(clock, reset, display_col, display_row, visible, hsync, vsync);

	// 72 Hz 800 x 600 VGA - 50MHz clock 

	parameter HOR_FIELD = 779;
	parameter HOR_STR_SYNC = 1009; 
	parameter HOR_STP_SYNC = 1039;
	parameter HOR_TOTAL = 1055;  
	parameter VER_FIELD = 479; 
	parameter VER_STR_SYNC = 501;
	parameter VER_STP_SYNC = 514; 
	parameter VER_TOTAL= 524;

	 
	input clock;
	input reset;

	output reg [11:0] display_col; 
	output reg [10:0] display_row; 
	output reg visible;
	output reg hsync, vsync;

	reg line_start_pulse;


	always@(posedge clock)
		begin
			if(reset) begin
				display_col = 0;
				display_row = 0;
				hsync = 1;
				vsync = 1;
				end
			else begin 
				display_col <= display_col + 1;
				if(display_col == HOR_TOTAL) begin
					line_start_pulse <= 1;
					display_col <= 0;
					end
				
				if(line_start_pulse == 1) begin
					line_start_pulse <= 0;
					display_row <= display_row + 1;
					end
				if(display_col == HOR_FIELD)begin
					visible <= 0;
					end
				if(display_col == HOR_STR_SYNC) begin
					hsync <= 0;
					end
				if(display_col == HOR_STP_SYNC) begin
					hsync <= 1;
					end
				
				if(display_row == VER_TOTAL) begin
					display_row <= 0;
					end
				if(display_row == VER_FIELD) begin
					visible <= 0;
					end
				if(display_row == VER_STR_SYNC) begin
					vsync <= 0;
					end
				if(display_row == VER_STP_SYNC) begin
					vsync <= 1;
					end
				if((display_row < VER_FIELD) && (display_col < HOR_FIELD)) begin
					visible <= 1;
					end
				
				

				end
				
			
			
		end
		
endmodule


module display1(CLOCK50, clock, reset, VGA_R, VGA_G, VGA_B, VGA_HS, VGA_VS, VGA_CLOCK, VGA_SYNC_N, VGA_BLANK_N ,MTL2MTL_TOUCH_INT_n,MTL2MTL_TOUCH_I2C_SCL,MTL2MTL_TOUCH_I2C_SDA);

input CLOCK50;
input clock;
input reset;

input MTL2MTL_TOUCH_INT_n;

output MTL2MTL_TOUCH_I2C_SCL;
inout MTL2MTL_TOUCH_I2C_SDA;

output [7:0] VGA_R, VGA_G, VGA_B; 

output VGA_CLOCK, VGA_SYNC_N;
output reg VGA_HS, VGA_VS, VGA_BLANK_N;

wire [7:0] VGA_R, VGA_G, VGA_B; 
wire touch_ready;
reg [7:0] red, green, blue;

wire [9:0] xco;
wire [3:0] touch_count;
wire [8:0] yco;
wire [7:0] gesture;

assign VGA_R = red; 
assign VGA_G = green; 
assign VGA_B = blue;
// add one additional clock cycle to compensate for videoDAC delay 
always @(posedge clock) VGA_HS = hsync;
always @(posedge clock) VGA_VS = vsync;
always @(posedge clock) VGA_BLANK_N = hsync & vsync;

assign VGA_CLOCK = clock; assign VGA_SYNC_N = 1'b0;

wire hsync, vsync;
wire visible;

reg [9:0] vierkantjeX;
reg [8:0] vierkantjeY;



i2c_touch_config touch(.iCLK(CLOCK50),.iRSTN(reset),.INT_n(MTL2MTL_TOUCH_INT_n),
							  .I2C_SCLK(MTL2MTL_TOUCH_I2C_SCL),.I2C_SDAT(MTL2MTL_TOUCH_I2C_SDA),
							  .oREADY(touch_ready),.oREG_X1(xco),.oREG_Y1(yco),.oREG_TOUCH_COUNT(touch_count),
							  .oREG_GESTURE(gesture));
							  


vga_controller vga(clock, reset, display_col, display_row, visible, hsync, vsync);


always @(posedge CLOCK50)begin
	if(reset) begin
		vierkantjeX = 90;
		vierkantjeY = 90;
	end else begin
		if(touch_ready) begin
			vierkantjeX = xco;
			vierkantjeY = yco;
		end
	end
end



always @(posedge clock)  begin
	if (reset) begin
		red = 0; green = 0; blue = 0;
	end else begin
		if (visible) begin
			if(vierkantjeY -20 < display_col && display_col < vierkantjeY + 20) begin
				if(vierkantjeX - 20 < display_row && display_row < vierkantjeX + 20) begin
					red = 255; blue = 0; green = 0;
				end
				else begin
					red = 255; blue = 255; green = 0;
				end
			end
			
			else begin
				red = 255; blue = 255; green = 0;
			end
		end else begin
			red = 0; green = 0; blue = 0;
		end 
	end
end
			

endmodule




